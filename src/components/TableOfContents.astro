---
import type { MarkdownHeading } from "astro";

export interface Props {
      headings: MarkdownHeading[];
}

const { headings } = Astro.props;
const tocHeadings = headings.filter((h) => h.depth <= 3); // Only show h1, h2, h3
---

<nav class="toc" aria-label="Table of contents" client:visible>
      <h3
            class="text-sm font-semibold uppercase tracking-wider text-gray-500 dark:text-gray-400 mb-3"
      >
            On this page
      </h3>
      <ul class="space-y-2">
            {
                  tocHeadings.map((heading) => (
                        <li class:list={["toc-item", `depth-${heading.depth}`]}>
                              <a
                                    href={`#${heading.slug}`}
                                    class="block text-sm transition-colors text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
                              >
                                    {heading.text}
                              </a>
                        </li>
                  ))
            }
      </ul>
</nav>

<style>
      .toc-item.depth-3 {
            padding-left: 1rem;
      }
      .toc-item a.active {
            color: var(--theme-accent);
            font-weight: 600;
      }
</style>

<script>
      document.addEventListener("DOMContentLoaded", () => {
            const tocLinks =
                  document.querySelectorAll<HTMLAnchorElement>(".toc-item a");
            const headings = document.querySelectorAll<HTMLHeadingElement>(
                  "main article h1[id], main article h2[id], main article h3[id]"
            );

            if (tocLinks.length === 0 || headings.length === 0) return;

            const observerCallback: IntersectionObserverCallback = (
                  entries
            ) => {
                  let activeId: string | null = null;

                  // Find the first visible or last intersecting entry
                  for (const entry of entries) {
                        if (entry.isIntersecting) {
                              activeId = entry.target.id;
                              break;
                        }
                  }

                  tocLinks.forEach((link) => {
                        link.classList.remove(
                              "active",
                              "text-blue-600",
                              "dark:text-blue-400"
                        );
                        // The link's href is absolute, so we check if it ends with the ID
                        if (link.href.endsWith(`#${activeId}`)) {
                              link.classList.add(
                                    "active",
                                    "text-blue-600",
                                    "dark:text-blue-400"
                              );
                        }
                  });
            };

            const observer = new IntersectionObserver(observerCallback, {
                  rootMargin: "-80px 0px -50% 0px", // Adjust -80px to match your sticky header's height
                  threshold: 1.0,
            });

            headings.forEach((heading) => observer.observe(heading));
      });
</script>
