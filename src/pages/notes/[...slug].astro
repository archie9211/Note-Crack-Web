---
import { getEntry } from "astro:content";
import ArticleLayout from "../../layouts/ArticleLayout.astro";
import ArticleNav from "../../components/ArticleNav.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import MobileToggles from "../../components/MobileToggles.astro";
import PrevNextNav from "../../components/PrevNextNav.astro";
import ForceUpdateButton from "../../components/ForceUpdateButton.astro";
import MCQ from "../../components/MCQ.astro";
import ShowAllAnswers from "../../components/ShowAllAnswers.astro";
import { buildNavigationTree } from "../../lib/navigation";
import MCQWrapper from "../../components/MCQWrapper.astro";
import Pagination from "../../components/Pagination.astro";
import type { Mcq } from "../../content/schema";

const { slug } = Astro.params;
if (!slug) return new Response("Not Found", { status: 404 });

const slugParts = slug.split("/");
const subjectSlug = slugParts[0];
const topicSlugWithClass = slugParts.slice(1).join("/");
const className = slugParts[1];

const entry = await getEntry(subjectSlug, topicSlugWithClass);
if (!entry) return new Response("Article not found", { status: 404 });

const { Content, headings } = await entry.render();
const hasHeadings = headings.length > 0;

// --- UPDATED: TYPE-SAFE MCQ HANDLING ---
// Use our imported Mcq type and provide a default empty array for safety.
const allMcqs: Mcq[] = entry.data.mcqs || [];

// =================================================================
// --- PAGINATION LOGIC ---
// =================================================================
const pageSize = 20;
const totalMcqs = allMcqs.length;
const totalPages = Math.ceil(totalMcqs / pageSize);

const pageParam = Astro.url.searchParams.get("page");
const currentPage = Math.max(
      1,
      Math.min(totalPages || 1, parseInt(pageParam || "1", 10))
);

const start = (currentPage - 1) * pageSize;
const end = start + pageSize;

const paginatedMcqs = allMcqs.slice(start, end);

// --- EXISTING NAVIGATION LOGIC (UNCHANGED) ---
const navTree = await buildNavigationTree();
const topicsInCurrentClass = navTree[subjectSlug]?.[className] ?? [];
const currentIndex = topicsInCurrentClass.findIndex(
      (topic) => topic.slug === topicSlugWithClass
);
const prevTopic =
      currentIndex > 0 ? topicsInCurrentClass[currentIndex - 1] : undefined;
const nextTopic =
      currentIndex < topicsInCurrentClass.length - 1
            ? topicsInCurrentClass[currentIndex + 1]
            : undefined;
const navProps = {
      navTree: navTree,
      currentSubject: subjectSlug,
      currentTopicSlug: topicSlugWithClass,
};
---

<ArticleLayout>
      <!-- Sidebars and Mobile Toggles (Unchanged) -->
      <div slot="left-sidebar"><ArticleNav {...navProps} /></div>
      <div slot="mobile-nav-drawer"><ArticleNav {...navProps} /></div>
      <div slot="right-sidebar">
            {hasHeadings && <TableOfContents headings={headings} />}
      </div>
      <div slot="mobile-toc">
            {hasHeadings && <TableOfContents headings={headings} />}
      </div>
      <div slot="mobile-toggles">
            <MobileToggles showMenuToggle={true} showTocToggle={hasHeadings} />
      </div>

      <!-- Main Content Area -->
      <div slot="main-content">
            <!-- Article Content (Unchanged) -->
            <article class="prose prose-neutral dark:prose-invert max-w-none">
                  <div class="mb-8 text-center">
                        <p
                              class="text-sm font-semibold uppercase tracking-wider text-blue-600 dark:text-blue-400 capitalize"
                        >
                              {subjectSlug.replace("-", " ")}
                        </p>
                        <h1 class="text-4xl font-extrabold my-2">
                              {entry.data.title}
                        </h1>
                        <p class="text-lg text-gray-500 dark:text-gray-400">
                              {entry.data.description}
                        </p>
                  </div>
                  <hr class="my-8" />
                  <Content />
            </article>

            <!-- --- UPDATED MCQ SECTION --- -->
            {
                  totalMcqs > 0 && (
                        <section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-800">
                              <div class="flex flex-col sm:flex-row justify-between sm:items-center mb-6">
                                    <h2 class="text-2xl font-bold">
                                          Test Your Knowledge
                                    </h2>
                                    {totalPages > 1 && (
                                          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2 sm:mt-0">
                                                Showing questions {start + 1} -{" "}
                                                {Math.min(end, totalMcqs)} of{" "}
                                                {totalMcqs}
                                          </p>
                                    )}
                              </div>

                              <MCQWrapper />

                              {/* Map over the paginated array instead of the full array */}
                              {paginatedMcqs.map((question, index) => (
                                    <MCQ
                                          question={question}
                                          index={start + index}
                                    />
                              ))}

                              {/* Conditionally render these components */}
                              {paginatedMcqs.length > 0 && <ShowAllAnswers />}
                              {totalPages > 1 && (
                                    <Pagination
                                          currentPage={currentPage}
                                          totalPages={totalPages}
                                          baseUrl={Astro.url.pathname}
                                    />
                              )}
                        </section>
                  )
            }

            <!-- Prev/Next Navigation (Unchanged) -->
            <PrevNextNav
                  prev={prevTopic && {
                        url: `/notes/${subjectSlug}/${prevTopic.slug}`,
                        title: prevTopic.title,
                  }}
                  next={nextTopic && {
                        url: `/notes/${subjectSlug}/${nextTopic.slug}`,
                        title: nextTopic.title,
                  }}
            />
            <ForceUpdateButton />
      </div>
</ArticleLayout>
