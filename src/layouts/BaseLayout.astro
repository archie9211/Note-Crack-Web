---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { collections } from "../content/config.mjs";
import ReloadPrompt from "../components/ReloadPrompt.astro";

const subjects = Object.keys(collections);
---

<html
      lang="en"
      class="scroll-smooth min-h-screen bg-white text-gray-900 dark:bg-gray-900 dark:text-gray-100 transition-colors"
>
      <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width" />
            <link rel="icon" type="image/png" href="/favicon.png" />
            <link rel="manifest" href="/manifest.webmanifest" />
            <link rel="apple-touch-icon" href="/icons/icon-192x192.png" />
            <link rel="mask-icon" href="/favicon.svg" color="#FFFFFF" />
            <meta name="msapplication-TileColor" content="#ffffff" />
            <meta name="theme-color" content="#ffffff" />
            <title>Note Crack</title>
            <link
                  rel="stylesheet"
                  href="https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.css"
                  integrity="sha512-DanfxWBasQtq+RtkNAEDTdX4Q6BPCJQ/kexi/RftcP0BcA4NIJPSi7i31Vl+Yl5OCfgZkdJmCqz+byTOIIRboQ=="
                  crossorigin="anonymous"
                  referrerpolicy="no-referrer"
            />
            <script is:inline>
                  // FOUC prevention script (unchanged)
                  document.documentElement.classList.toggle(
                        "dark",
                        localStorage.theme === "dark" ||
                              (!("theme" in localStorage) &&
                                    window.matchMedia(
                                          "(prefers-color-scheme: dark)"
                                    ).matches)
                  );
            </script>

            <style is:global>
                  #nprogress .bar {
                        /* Match your site's accent color (blue-600) */
                        background: #2563eb !important;
                        height: 3px !important;
                  }
            </style>
      </head>

      <body class="flex flex-col min-h-screen font-sans antialiased">
            <Header subjects={subjects} />
            <main class="flex-1 w-full"><slot /></main>
            <Footer />
            <ReloadPrompt />

            {/* ======================================================= */}
            {/*   NEW FUSE.JS CLIENT-SIDE SEARCH SCRIPT                 */}
            {/* ======================================================= */}
            <script is:inline>
                  function initializeCustomSearch() {
                        // --- Get all necessary HTML elements ---
                        const desktopInput =
                              document.getElementById("search-input");
                        const modalInput =
                              document.getElementById("modal-search-input");
                        const triggerBtn =
                              document.getElementById("search-trigger-btn");
                        const closeBtn =
                              document.getElementById("search-close-btn");
                        const modal = document.getElementById("search-modal");
                        const resultsContainer = document.getElementById(
                              "search-results-container"
                        );

                        if (
                              !modal ||
                              !resultsContainer ||
                              !modalInput ||
                              !closeBtn
                        )
                              return;

                        // --- 1. State for Fuse.js ---
                        let fuse = null;
                        let isLoading = false;

                        // --- 2. Function to load search data and initialize Fuse.js ---
                        async function loadSearchData() {
                              if (fuse || isLoading) return; // Don't load if already loaded or in progress
                              isLoading = true;

                              try {
                                    const response =
                                          await fetch("/search-index.json");
                                    const searchData = await response.json();

                                    // Load Fuse.js from a CDN - simple and reliable
                                    const Fuse = (
                                          await import(
                                                "https://cdn.jsdelivr.net/npm/fuse.js@7.0.0/dist/fuse.mjs"
                                          )
                                    ).default;

                                    // Configure Fuse.js to search title and description
                                    fuse = new Fuse(searchData, {
                                          keys: [
                                                { name: "title", weight: 0.7 }, // Title is more important
                                                {
                                                      name: "description",
                                                      weight: 0.3,
                                                }, // Description is less important
                                          ],
                                          includeScore: true,
                                          threshold: 0.4, // Adjust for more/less fuzzy results
                                    });
                              } catch (e) {
                                    console.error(
                                          "Failed to load search index or Fuse.js:",
                                          e
                                    );
                                    resultsContainer.innerHTML = `<p class="text-center text-red-500 py-8">Search failed to load.</p>`;
                              } finally {
                                    isLoading = false;
                              }
                        }

                        // Pre-load search data on interaction
                        desktopInput?.addEventListener(
                              "focus",
                              loadSearchData,
                              { once: true }
                        );
                        triggerBtn?.addEventListener("click", loadSearchData, {
                              once: true,
                        });

                        // --- 3. Function to perform the search and render results ---
                        let debounceTimer;
                        function performSearch() {
                              if (!fuse) {
                                    resultsContainer.innerHTML = `<p class="text-center text-gray-500 py-8">Loading search index...</p>`;
                                    loadSearchData(); // Try loading data if not available
                                    return;
                              }

                              const query = modalInput.value;
                              if (query.length < 2) {
                                    resultsContainer.innerHTML = `<p class="text-center text-gray-500 py-8">Start typing to see results.</p>`;
                                    return;
                              }

                              const results = fuse.search(query);

                              if (results.length === 0) {
                                    resultsContainer.innerHTML = `<p class="text-center text-gray-500 py-8">No results found for "<strong>${query}</strong>"</p>`;
                                    return;
                              }

                              // The original note object is in the 'item' property
                              let html =
                                    '<ul class="space-y-4 list-none pl-0">';
                              for (const result of results.slice(0, 20)) {
                                    // Show top 20 results
                                    const note = result.item;
                                    html += `
            <li>
              <a href="${note.url}" class="block p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-all group hover:border-blue-500 dark:hover:border-blue-500">
                <h2 class="text-xl font-semibold text-blue-600 dark:text-blue-400 group-hover:underline">${note.title}</h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">${note.description}</p>
              </a>
            </li>
          `;
                              }
                              html += "</ul>";
                              resultsContainer.innerHTML = html;
                        }

                        // --- 4. Modal handling and Event Listeners ---
                        function openModal() {
                              modal.classList.remove("hidden");
                              document.body.style.overflow = "hidden";
                              modalInput.focus();
                              if (modalInput.value.length > 1) {
                                    performSearch();
                              }
                        }

                        function closeModal() {
                              modal.classList.add("hidden");
                              document.body.style.overflow = "";
                        }

                        desktopInput?.addEventListener("focus", openModal);
                        triggerBtn?.addEventListener("click", openModal);
                        closeBtn.addEventListener("click", closeModal);

                        modalInput.addEventListener("input", () => {
                              clearTimeout(debounceTimer);
                              debounceTimer = setTimeout(performSearch, 200);
                        });

                        modal.addEventListener("click", (event) => {
                              if (event.target === modal) closeModal();
                        });
                        document.addEventListener("keydown", (event) => {
                              if (event.key === "Escape") closeModal();
                        });
                  }

                  document.addEventListener(
                        "DOMContentLoaded",
                        initializeCustomSearch
                  );
            </script>

            {/* Your PWA script remains untouched and correct */}
            <script>
                  import "../scripts/pwa.ts";
            </script>
            <script>
                  import "../scripts/nprogress.ts";
            </script>
      </body>
</html>
